// MIXINS //
@import "mixins";

body {
  padding: $padding-default;
  background-color: $color-bg;

  $small-padding: $padding-default * 0.1;

  @include screen-lg {
    padding: $padding-default * 0.2;
  }

  @include screen-md {
    padding: $small-padding;
  }

  @include screen-sm {
    padding: $small-padding;
  }

  @include screen-xs {
    padding: $small-padding;
  }
}

.icon {
  width: 80%;
  height: 80%;
  font-size: $font-size;
  max-width: $icon-size;
  max-height: $icon-size;
  min-width: $icon-size * 0.4;
  min-height: $icon-size * 0.4;
  //vertical-align: middle; // weird seems to hang from middle wtf?!
  color: inherit;
  -webkit-text-fill-color: inherit;
  transition: inherit;

  @each $size, $value in $all-icon-sizes {
    &.#{$size} {
      @include set-max-wh-size($value);
    }
  }
}

@each $num, $value in $all-icon-nums {
  .#{$num} {
    @extend .icon;

    @include set-wh-size($value);
  }
}

// screen open / hide / props //

.hide-xs {
  @include screen-xs {
    display: none;
  }
}

.hide-sm {
  @include screen-sm {
    display: none;
  }
}

.hide-md {
  @include screen-md {
    display: none;
  }
}

.hide-lg {
  @include screen-lg {
    display: none;
  }
}

.hide-xl {
  @include screen-xl {
    display: none;
  }
}

.hide-xxl {
  @include screen-xxl {
    display: none;
  }
}

.hide-sm-down {
  @extend .hide-xs;
  @extend .hide-sm;
}

.hide-md-down {
  @extend .hide-xs;
  @extend .hide-sm;
  @extend .hide-md;
}

.hide-lg-down {
  @extend .hide-xs;
  @extend .hide-sm;
  @extend .hide-md;
  @extend .hide-lg;
}

.hide-xl-down {
  @extend .hide-xs;
  @extend .hide-sm;
  @extend .hide-md;
  @extend .hide-lg;
  @extend .hide-xl;
}

.hide-sm-up {
  @extend .hide-sm;
  @extend .hide-md;
  @extend .hide-lg;
  @extend .hide-xl;
  @extend .hide-xxl;
}

.hide-md-up {
  @extend .hide-md;
  @extend .hide-lg;
  @extend .hide-xl;
  @extend .hide-xxl;
}

.hide-lg-up {
  @extend .hide-lg;
  @extend .hide-xl;
  @extend .hide-xxl;
}

.hide-xl-up {
  @extend .hide-xl;
  @extend .hide-xxl;
}

.clickable {
  cursor: pointer;
}

.min-half {
  min-width: 50%;
}

.max-half {
  max-width: 50%;
}

.relative {
  position: relative;
}

.absolute {
  position: absolute;
}

.fixed {
  position: fixed;
}

.transition {
  transition: $transition-default;
}

.transition-fast {
  transition: $transition-default * 0.5;
}

.transition-slow {
  transition: $transition-default * 2;
}

.no-pad {
  padding: 0;
}

.margin {
  margin: $margin-default;
}

.m-1 {
  margin: $unit-default;
}

.m-2 {
  margin: $unit-default * 2;
}

.no-margin {
  margin: 0;
}

.no-margin-l {
  margin-left: 0;
}

.no-margin-r {
  margin-right: 0;
}

.no-margin-x {
  margin-left: 0;
  margin-right: 0;
}

.no-margin-y {
  margin-top: 0;
  margin-bottom: 0;
}

.no-overflow {
  overflow: hidden;
}

.overflow-auto-x {
  overflow-x: auto;
}

.flex-row,
.flex-col {
  display: flex;
  flex-wrap: wrap;
}

.no-wrap {
  flex-wrap: nowrap;
}

.flex-row {
  flex-direction: row;
  align-items: center;
}

.flex-col {
  flex-direction: column;
  justify-items: center;
}

.flex-between {
  justify-content: space-between;
}

.flex-around {
  justify-content: space-around;
}

.flex-auto {
  flex: auto;
}

.flex-start {
  justify-content: flex-start;
}

.flex-end {
  justify-content: flex-end;
}

.align-center {
  align-items: center;
}

.align-middle {
  vertical-align: middle;
}

.display-inline {
  display: inline;
}

.display-inline-b {
  display: inline-block;
}

// for accessability screen reader text
.sr-only {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.alpha {
  opacity: $color-alpha;
}

@each $color, $value in $all-colours {
  .stroke-#{$color} {
    stroke: $value;
  }

  .fill-#{$color} {
    fill: $value;
  }

  .color-#{$color} {
    color: $value;
    -webkit-text-fill-color: $value;
  }

  .bg-#{$color} {
    background-color: $value;
  }

  .border-#{$color} {
    border: $border-size solid $value;
  }
}

// create a staggered time delay for a class
@mixin delay_anims($count:2, $nth:1, $step:0.1, $initial:0) {
  @for $i from $nth through $count{
    &:nth-of-type(#{$i}) {
      animation-delay: #{$initial}s;
      $initial: $initial + $step;
    }
  }
}

.fade {
  animation-delay: 0s;
  animation-fill-mode: both;
  animation-duration: $transition-default * 0.5;
  animation-direction: normal;
  animation-timing-function: ease-out;
}

.anim-show {
  animation-name: anim_show;
  @extend .fade;
  @include delay_anims(20, 1, 0.15, 0);
}

.anim-show-fast {
  animation-name: anim_fade;
  @extend .fade;
  @include delay_anims(20, 1, 0.03, 0);
}

@keyframes anim_fade {
  0% {
    opacity: 0.3;
  }

  100% {
    opacity: 1;
  }
}

@keyframes anim_show {
  0% {
    opacity: 0.3;
    transform: translateY(-2.5rem) scale(0.3);
  }

  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

//
//// vuejs transition anims
//.list-item {
//  width: 100%;
//  //transition: all $transition-default * 2 ease-out;
//}
//
///* base */
//.list-anim {
//  backface-visibility: hidden;
//  z-index: 1;
//}
//
///* moving */
//.list-anim-move {
//  //transition: all $transition-default ease-in-out 100ms;
//}
//
///* appearing */
//.list-anim-enter-active {
//  //transition: all $transition-default ease-out;
//}
//
///* disappearing */
//.list-anim-leave-active {
//  transition: all $transition-default ease-in;
//  //position: absolute;
//  z-index: 0;
//}
//
///* appear at / disappear to */
//.list-anim-enter,
//.list-anim-leave-to {
//  opacity: 0;
//}
//
//.list-anim-enter {
//  //transform: translateX($unit-default * -3);
//  //transform: translateY($unit-default * -1);
//}
//
//.list-anim-leave-to {
//  //transform: translateX($unit-default * 3);
//  //transform: translateY($unit-default);
//}
